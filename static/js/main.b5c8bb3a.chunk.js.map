{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","filterReducer","query","status","todosReducer","todos","newTodos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","preparedTodos","completed","trim","title","toLowerCase","includes","className","map","id","classNames","onClick","selectTodoActions","TodoFilter","value","onChange","event","newStatus","target","filterActions","placeholder","newQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","finally","currentTodoActions","href","email","name","App","todosActions","catch","e","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5c8bb3a.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatus = { type: 'filter/STATUS', payload: Status };\ntype SetQuery = { type: 'filter/QUERY', payload: string };\ntype ResetQuery = { type: 'filter/RESET_QUERY' };\n\ntype State = {\n  query: string,\n  status: Status\n};\n\nconst setStatus = (status: Status): SetStatus => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\nconst resetQuery = (): ResetQuery => ({\n  type: 'filter/RESET_QUERY',\n});\n\ntype Action = SetStatus | SetQuery | ResetQuery;\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/RESET_QUERY':\n      return { ...state, query: '' };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\nexport const actions = { setStatus, setQuery, resetQuery };\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todo/SET', payload: Todo[] };\n\ntype Action = SetAction;\n\nconst set = (newTodos: Todo[]): SetAction => ({\n  type: 'todo/SET',\n  payload: newTodos,\n});\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\nexport const actions = { set };\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as selectTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = filter;\n  const dispatch = useAppDispatch();\n\n  const onSelectTodo = (newTodo: Todo) => dispatch(\n    selectTodoActions.setTodo(newTodo),\n  );\n\n  const filteredTodos: Todo[] = useMemo(() => {\n    let preparedTodos = [...todos];\n\n    if (status) {\n      preparedTodos = preparedTodos.filter(todo => {\n        switch (status) {\n          case 'active':\n            return !todo.completed;\n\n          case 'completed':\n            return todo.completed;\n\n          case 'all':\n            return todo;\n\n          default:\n            return todo;\n        }\n      });\n    }\n\n    if (query.trim()) {\n      preparedTodos = preparedTodos\n        .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    return preparedTodos;\n  }, [todos, filter, query]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map(todo => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': currentTodo === todo,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames(\n                    { 'has-text-danger': !completed },\n                    { 'has-text-success': completed },\n                  )}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye': currentTodo !== todo },\n                      { 'fa-eye-slash': currentTodo === todo },\n                    )}\n                    />\n\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\ntype Props = {\n};\n\nexport const TodoFilter: React.FC<Props> = () => {\n  const filter = useAppSelector(state => state.filter);\n  const { query, status } = filter;\n  const dispatch = useAppDispatch();\n\n  function handleStatusChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newStatus = event.target.value as Status;\n\n    dispatch(filterActions.setStatus(newStatus));\n  }\n\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const newQuery = event.target.value;\n\n    dispatch(filterActions.setQuery(newQuery));\n  }\n\n  function handleCloseSearch() {\n    dispatch(filterActions.resetQuery());\n  }\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleCloseSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const closeModal = () => dispatch(currentTodoActions.removeTodo());\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {currentTodo && `Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a\n                href={`mailto:${user?.email}`}\n              >\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then((newTodos) => dispatch(todosActions.set(newTodos)))\n      .catch((e) => {\n        throw new Error(e);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      ) }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}